using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using ElectricityShop.Application.Features.Products.Commands; // For CreateProductCommand etc.
using ElectricityShop.Domain.Entities;
using ElectricityShop.Domain.Interfaces;
using MediatR;
using Microsoft.Extensions.Logging;
using System.Collections.Generic; // Required for List<T>

namespace ElectricityShop.Application.Features.Products.Commands.Handlers
{
    public class CreateProductCommandHandler : IRequestHandler<CreateProductCommand, Guid>
    {
        private readonly ILogger<CreateProductCommandHandler> _logger;
        private readonly IRepository<Product> _productRepository;
        private readonly IRepository<Category> _categoryRepository;

        public CreateProductCommandHandler(
            ILogger<CreateProductCommandHandler> logger,
            IRepository<Product> productRepository,
            IRepository<Category> categoryRepository)
        {
            _logger = logger;
            _productRepository = productRepository;
            _categoryRepository = categoryRepository;
        }

        public async Task<Guid> Handle(CreateProductCommand request, CancellationToken cancellationToken)
        {
            _logger?.LogInformation("Attempting to create a new product with Name: {ProductName}", request.Name);

            // Validate CategoryId
            if (request.CategoryId != Guid.Empty)
            {
                var category = await _categoryRepository.GetByIdAsync(request.CategoryId);
                if (category == null)
                {
                    _logger?.LogWarning("Invalid CategoryId: {CategoryId}. Category not found.", request.CategoryId);
                    // In a real app, consider using a custom NotFoundException
                    throw new ApplicationException($"Invalid CategoryId: {request.CategoryId}. Category not found.");
                }
            }
            else
            {
                // Allow product creation without a category, or throw if category is mandatory
                 _logger?.LogInformation("Creating product without a category as CategoryId is empty/default.");
            }

            var productEntity = new Product
            {
                Name = request.Name,
                Description = request.Description,
                Price = request.Price,
                StockQuantity = request.StockQuantity,
                // Handle null CategoryId for products without a category
                CategoryId = request.CategoryId == Guid.Empty ? (Guid?)null : request.CategoryId,
                IsActive = request.IsActive,
                Images = new List<ProductImage>(),      // Initialize collections
                Attributes = new List<ProductAttribute>() // Initialize collections
                // Id will be generated by BaseEntity or database
                // CreatedAt, UpdatedAt typically handled by BaseEntity or IAuditable an interceptor
            };

            // Map Images from DTOs to Entities
            if (request.Images != null)
            {
                foreach (var imageDto in request.Images)
                {
                    productEntity.Images.Add(new ProductImage
                    {
                        ImageUrl = imageDto.ImageUrl,
                        IsMain = imageDto.IsMain
                        // ProductId will be set by EF Core relationship fixup if configured
                        // Id and CreatedAt/UpdatedAt from BaseEntity
                    });
                }
            }

            // Map Attributes from DTOs to Entities
            if (request.Attributes != null)
            {
                foreach (var attributeDto in request.Attributes)
                {
                    productEntity.Attributes.Add(new ProductAttribute
                    {
                        Name = attributeDto.Name,
                        Value = attributeDto.Value
                        // ProductId will be set by EF Core relationship fixup if configured
                        // Id and CreatedAt/UpdatedAt from BaseEntity
                    });
                }
            }
            
            // AddAsync might return the entity or void depending on IRepository design.
            // Assuming it adds the Id to the passed entity or the context tracks it.
            await _productRepository.AddAsync(productEntity); 
            
            // productEntity.Id should be populated if using EF Core & BaseEntity handles Id generation upon Add.
            if (productEntity.Id == Guid.Empty)
            {
                _logger?.LogError("Product Id was not generated after AddAsync. This indicates an issue with repository implementation or entity configuration.");
                throw new ApplicationException("Product ID was not generated after saving. Cannot return a valid ID.");
            }

            _logger?.LogInformation("Product created successfully with Id: {ProductId}", productEntity.Id);
            
            return productEntity.Id;
        }
    }
}
